cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
library(devtools)
#| warning: false
#<<<<<<< HEAD
library(corrplot)
library(xts)
library(lmtest)
library(quantmod)
library(dplyr)
library(tidyr)
library(fUnitRoots)
library(vars)
library(tseries)
library(aTSA)
library(car)
library(seasonal)
library(reshape2) #For creating correlation matrix for heatmap
library(ggplot2) #Tables, heatmaps
library(forecast)
library(kableExtra)
library(formattable)
library(Metrics)
library(TSEwgt)
#library(RSBID) #We will need SMOTE_NC from it
library(tidyverse)
#=======
library(dplyr) #data manipulation
library(formattable) #data manipulation
library(Metrics) #metrics
#library(MLmetrics) #metrics for machine learning (similar to Metrics library)
#library(e1071) #svm
#library(xgboost) #xgboost model
#library(caret) #dummy variables, precision metrics, knn
#library(RSBID) #We will need SMOTE_NC from it
library(tidyverse) #collection of packages for data science
#>>>>>>> 1b3e2b3bbf38c00b31d322a3bd672e29a047b39a
rain_df <- read.csv("weatherAUS.csv")
tail(rain_df)
# Check the original shape of the dataset (rows, columns)
dim(rain_df)
# Check for missing data in target variable
sum(is.na(rain_df$RainTomorrow))
# Drop the data not including target variable since using them may later negativley influence the model
rain_df <- rain_df %>% drop_na(c("RainTomorrow"))
dim(rain_df)
# Check distribution, look if balanced/imbalanced
table(rain_df$RainTomorrow)
# Visualise distibution to check the impalance
barplot(table(rain_df$RainTomorrow))
# Replace objects Yes with 1 and No with 0
rain_df["RainTomorrow"][rain_df["RainTomorrow"] == "Yes"] <- 1
rain_df["RainTomorrow"][rain_df["RainTomorrow"] == "No"] <- 0
rain_df$RainTomorrow <- as.numeric(rain_df$RainTomorrow)
rain_df["RainTomorrow"]
# Check for data type and data amount in columns.
str(rain_df)
# Check for unique data for Categorical in order to decide weather one hot encoding is viable option.
n_distinct(rain_df$Date)
n_distinct(rain_df$Location)
n_distinct(rain_df$MinTemp)
n_distinct(rain_df$MaxTemp)
n_distinct(rain_df$Rainfall)
n_distinct(rain_df$Evaporation)
n_distinct(rain_df$Sunshine)
n_distinct(rain_df$WindGustDir)
n_distinct(rain_df$WindGustDir)
n_distinct(rain_df$WindGustSpeed)
n_distinct(rain_df$WindDir9am)
n_distinct(rain_df$WindDir3pm)
n_distinct(rain_df$WindSpeed9am)
n_distinct(rain_df$WindSpeed3pm)
n_distinct(rain_df$Humidity9am)
n_distinct(rain_df$Humidity3pm)
n_distinct(rain_df$Pressure9am)
n_distinct(rain_df$Pressure3pm)
n_distinct(rain_df$Cloud9am)
n_distinct(rain_df$Cloud3pm)
n_distinct(rain_df$Temp9am)
n_distinct(rain_df$Temp3pm)
n_distinct(rain_df$RainToday)
n_distinct(rain_df$RainTomorrow)
# Look for invalid data
summary(rain_df)
# Look for missing data
sum(is.na(rain_df$Date))
sum(is.na(rain_df$Location))
sum(is.na(rain_df$MinTemp))
sum(is.na(rain_df$MaxTemp))
sum(is.na(rain_df$Rainfall))
sum(is.na(rain_df$Evaporation))
sum(is.na(rain_df$Sunshine))
sum(is.na(rain_df$WindGustDir))
sum(is.na(rain_df$WindGustDir))
sum(is.na(rain_df$WindGustSpeed))
sum(is.na(rain_df$WindDir9am))
sum(is.na(rain_df$WindDir3pm))
sum(is.na(rain_df$WindSpeed9am))
sum(is.na(rain_df$WindSpeed3pm))
sum(is.na(rain_df$Humidity9am))
sum(is.na(rain_df$Humidity3pm))
sum(is.na(rain_df$Pressure9am))
sum(is.na(rain_df$Pressure3pm))
sum(is.na(rain_df$Cloud9am))
sum(is.na(rain_df$Cloud3pm))
sum(is.na(rain_df$Temp9am))
sum(is.na(rain_df$Temp3pm))
sum(is.na(rain_df$RainToday))
sum(is.na(rain_df$RainTomorrow))
rain_df <- rain_df %>% drop_na(c("Sunshine"))
# Check for missing data
sum(is.na(rain_df$Date))
sum(is.na(rain_df$Location))
sum(is.na(rain_df$MinTemp))
sum(is.na(rain_df$MaxTemp))
sum(is.na(rain_df$Rainfall))
sum(is.na(rain_df$Evaporation))
sum(is.na(rain_df$Sunshine))
sum(is.na(rain_df$WindGustDir))
sum(is.na(rain_df$WindGustDir))
sum(is.na(rain_df$WindGustSpeed))
sum(is.na(rain_df$WindDir9am))
sum(is.na(rain_df$WindDir3pm))
sum(is.na(rain_df$WindSpeed9am))
sum(is.na(rain_df$WindSpeed3pm))
sum(is.na(rain_df$Humidity9am))
sum(is.na(rain_df$Humidity3pm))
sum(is.na(rain_df$Pressure9am))
sum(is.na(rain_df$Pressure3pm))
sum(is.na(rain_df$Cloud9am))
sum(is.na(rain_df$Cloud3pm))
sum(is.na(rain_df$Temp9am))
sum(is.na(rain_df$Temp3pm))
sum(is.na(rain_df$RainToday))
sum(is.na(rain_df$RainTomorrow))
# fill missing data for numeric attributes with mean and median (if there are outliers [max values are much bigger than mean values] in our attribute we will use median)
rain_df$Temp3pm[is.na(rain_df$Temp3pm)] <- mean(rain_df$Temp3pm, na.rm = TRUE)
rain_df$Temp9am[is.na(rain_df$Temp9am)] <- mean(rain_df$Temp9am, na.rm = TRUE)
rain_df$Cloud3pm[is.na(rain_df$Cloud3pm)] <- mean(rain_df$Cloud3pm, na.rm = TRUE)
rain_df$Cloud9am[is.na(rain_df$Cloud9am)] <- mean(rain_df$Cloud9am, na.rm = TRUE)
rain_df$Pressure3pm[is.na(rain_df$Pressure3pm)] <- mean(rain_df$Pressure3pm, na.rm = TRUE)
rain_df$Pressure9am[is.na(rain_df$Pressure9am)] <- mean(rain_df$Pressure9am, na.rm = TRUE)
rain_df$Humidity3pm[is.na(rain_df$Humidity3pm)] <- mean(rain_df$Humidity3pm, na.rm = TRUE)
rain_df$Humidity9am[is.na(rain_df$Humidity9am)] <- mean(rain_df$Humidity9am, na.rm = TRUE)
rain_df$WindSpeed3pm[is.na(rain_df$WindSpeed3pm)] <- median(rain_df$WindSpeed3pm, na.rm = TRUE)
rain_df$WindSpeed9am[is.na(rain_df$WindSpeed9am)] <- median(rain_df$WindSpeed9am, na.rm = TRUE)
rain_df$WindGustSpeed[is.na(rain_df$WindGustSpeed)] <- median(rain_df$WindGustSpeed, na.rm = TRUE)
rain_df$Sunshine[is.na(rain_df$Sunshine)] <- mean(rain_df$Sunshine, na.rm = TRUE)
rain_df$RainToday[is.na(rain_df$RainToday)] <- mode(rain_df$RainToday)
rain_df$Evaporation <- ifelse(is.na(rain_df$Evaporation), median(rain_df$Evaporation, na.rm = TRUE), rain_df$Evaporation)
rain_df$Rainfall <- ifelse(is.na(rain_df$Rainfall), median(rain_df$Rainfall, na.rm = TRUE), rain_df$Rainfall)
rain_df$MaxTemp <- ifelse(is.na(rain_df$MaxTemp), mean(rain_df$MaxTemp, na.rm = TRUE), rain_df$MaxTemp)
rain_df$MinTemp <- ifelse(is.na(rain_df$MinTemp), mean(rain_df$MinTemp, na.rm = TRUE), rain_df$MinTemp)
# Look for missing data again
sum(is.na(rain_df$Date))
sum(is.na(rain_df$Location))
sum(is.na(rain_df$MinTemp))
sum(is.na(rain_df$MaxTemp))
sum(is.na(rain_df$Rainfall))
sum(is.na(rain_df$Evaporation))
sum(is.na(rain_df$Sunshine))
sum(is.na(rain_df$WindGustDir))
sum(is.na(rain_df$WindGustSpeed))
sum(is.na(rain_df$WindDir9am))
sum(is.na(rain_df$WindDir3pm))
sum(is.na(rain_df$WindSpeed9am))
sum(is.na(rain_df$WindSpeed3pm))
sum(is.na(rain_df$Humidity9am))
sum(is.na(rain_df$Humidity3pm))
sum(is.na(rain_df$Pressure9am))
sum(is.na(rain_df$Pressure3pm))
sum(is.na(rain_df$Cloud9am))
sum(is.na(rain_df$Cloud3pm))
sum(is.na(rain_df$Temp9am))
sum(is.na(rain_df$Temp3pm))
sum(is.na(rain_df$RainToday))
sum(is.na(rain_df$RainTomorrow))
# Chgeck the amount of data after dropping sunshine variable na
dim(rain_df)
# Check for outliers using Box Plot
boxplot(Rainfall ~ RainTomorrow, data = rain_df)
# Check on histogram
hist(rain_df$Rainfall)
# Use IQR to define range of valid data
Q1 <- quantile(rain_df$Rainfall, 0.25)
Q3 <- quantile(rain_df$Rainfall, 0.75)
IQR <- Q3 - Q1
Low <- Q1 - IQR * 1.5
High <- Q3 + IQR * 1.5
print(Low)
print(High)
# Check the amount of outliers
count1 <- sum(rain_df$Rainfall > High)
count2 <- sum(rain_df$Rainfall < Low)
count3 <- count1 + count2
print(count1)
print(count2)
# We decided to censor our data to value of 75, because our variable is not normally distributed (high density of data near 0)
rain_df$Rainfall[rain_df$Rainfall > 75] <- 75
# Check changes on histogram
hist(rain_df$Rainfall)
# Check Box Plot again
boxplot(Rainfall ~ RainTomorrow, data = rain_df)
# Check for outliers using Box Plot
boxplot(Evaporation ~ RainTomorrow, data = rain_df)
# Check on histogram
hist(rain_df$Evaporation)
# Use IQR to define range of valid data
Q1 <- quantile(rain_df$Evaporation, 0.25)
Q3 <- quantile(rain_df$Evaporation, 0.75)
IQR <- Q3 - Q1
Low <- Q1 - IQR * 1.5
High <- Q3 + IQR * 1.5
print(Low)
print(High)
# Check the amount of outliers
count1 <- sum(rain_df$Evaporation > High)
count2 <- sum(rain_df$Evaporation < Low)
count3 <- count1 + count2
print(count1)
print(count2)
# Change outliers respectivley to upper boundry since (relativley) there is not too many outliers
rain_df$Evaporation[rain_df$Evaporation > High] <- High
# Check changes on histogram
hist(rain_df$Evaporation)
# Check Box Plot again
boxplot(Evaporation ~ RainTomorrow, data = rain_df)
# Check for outliers using Box Plot
boxplot(WindGustSpeed ~ RainTomorrow, data = rain_df)
# Check on histogram
hist(rain_df$WindGustSpeed)
# Use IQR to define range of valid data
Q1 <- quantile(rain_df$WindGustSpeed, 0.25)
Q3 <- quantile(rain_df$WindGustSpeed, 0.75)
IQR <- Q3 - Q1
Low <- Q1 - IQR * 1.5
High <- Q3 + IQR * 1.5
print(Low)
print(High)
# Check the amount of outliers
count1 <- sum(rain_df$WindGustSpeed > High)
count2 <- sum(rain_df$WindGustSpeed < Low)
count3 <- count1 + count2
print(count1)
print(count2)
# Change outliers respectivley to upper boundry since (relativley) there is not too many outliers
rain_df$WindGustSpeed[rain_df$WindGustSpeed > High] <- High
# Check changes on histogram
hist(rain_df$WindGustSpeed)
# Check Box Plot again
boxplot(WindGustSpeed ~ RainTomorrow, data = rain_df)
# Check for outliers using Box Plot
boxplot(WindSpeed9am ~ RainTomorrow, data = rain_df)
# Check on histogram
hist(rain_df$WindSpeed9am)
# Use IQR to define range of valid data
Q1 <- quantile(rain_df$WindSpeed9am, 0.25)
Q3 <- quantile(rain_df$WindSpeed9am, 0.75)
IQR <- Q3 - Q1
Low <- Q1 - IQR * 1.5
High <- Q3 + IQR * 1.5
print(Low)
print(High)
# Check the amount of outliers
count1 <- sum(rain_df$WindSpeed9am > High)
count2 <- sum(rain_df$WindSpeed9am < Low)
count3 <- count1 + count2
print(count1)
print(count2)
# Change outliers respectivley to upper boundry since (relativley) there is not too many outliers
rain_df$WindSpeed9am[rain_df$WindSpeed9am > High] <- High
# Check changes on histogram
hist(rain_df$WindSpeed9am)
# Check Box Plot again
boxplot(WindSpeed9am ~ RainTomorrow, data = rain_df)
# Check for outliers using Box Plot
boxplot(WindSpeed3pm ~ RainTomorrow, data = rain_df)
# Check on histogram
hist(rain_df$WindSpeed3pm)
# Use IQR to define range of valid data
Q1 <- quantile(rain_df$WindSpeed3pm, 0.25)
Q3 <- quantile(rain_df$WindSpeed3pm, 0.75)
IQR <- Q3 - Q1
Low <- Q1 - IQR * 1.5
High <- Q3 + IQR * 1.5
print(Low)
print(High)
# Check the amount of outliers
count1 <- sum(rain_df$WindSpeed3pm > High)
count2 <- sum(rain_df$WindSpeed3pm < Low)
count3 <- count1 + count2
print(count1)
print(count2)
# Change outliers respectivley to upper boundry since (relativley) there is not too many outliers
rain_df$WindSpeed3pm[rain_df$WindSpeed3pm > High] <- High
# Check changes on histogram
hist(rain_df$WindSpeed3pm)
# Check Box Plot again
boxplot(WindSpeed3pm ~ RainTomorrow, data = rain_df)
# Since the wind direction were wide spread and very specific we decided to simplify the data by puting them into categories based on dominant direction, filled the missing data for wind direction using mode.
rain_df$WindDir9am[rain_df$WindDir9am == "NNW"] <- "N"
rain_df$WindDir9am[rain_df$WindDir9am == "NNE"] <- "N"
rain_df$WindDir9am[rain_df$WindDir9am == "NE"] <- "N"
rain_df$WindDir9am[rain_df$WindDir9am == "N"] <- "N"
rain_df$WindDir9am[rain_df$WindDir9am == "ENE"] <- "E"
rain_df$WindDir9am[rain_df$WindDir9am == "ESE"] <- "E"
rain_df$WindDir9am[rain_df$WindDir9am == "SE"] <- "E"
rain_df$WindDir9am[rain_df$WindDir9am == "E"] <- "E"
rain_df$WindDir9am[rain_df$WindDir9am == "SSE"] <- "S"
rain_df$WindDir9am[rain_df$WindDir9am == "SSW"] <- "S"
rain_df$WindDir9am[rain_df$WindDir9am == "SW"] <- "S"
rain_df$WindDir9am[rain_df$WindDir9am == "s"] <- "S"
rain_df$WindDir9am[rain_df$WindDir9am == "WSW"] <- "W"
rain_df$WindDir9am[rain_df$WindDir9am == "WNW"] <- "W"
rain_df$WindDir9am[rain_df$WindDir9am == "NW"] <- "W"
rain_df$WindDir9am[rain_df$WindDir9am == "W"] <- "W"
rain_df$WindDir9am[rain_df$WindDir9am == "NNW"] <- "N"
rain_df$WindDir9am[rain_df$WindDir9am == "NNE"] <- "N"
rain_df$WindDir9am[rain_df$WindDir9am == "NE"] <- "N"
rain_df$WindDir9am[rain_df$WindDir9am == "N"] <- "N"
rain_df$WindDir9am[rain_df$WindDir9am == "ENE"] <- "E"
rain_df$WindDir9am[rain_df$WindDir9am == "ESE"] <- "E"
rain_df$WindDir9am[rain_df$WindDir9am == "SE"] <- "E"
rain_df$WindDir9am[rain_df$WindDir9am == "E"] <- "E"
rain_df$WindDir9am[rain_df$WindDir9am == "SSE"] <- "S"
rain_df$WindDir9am[rain_df$WindDir9am == "SSW"] <- "S"
rain_df$WindDir9am[rain_df$WindDir9am == "SW"] <- "S"
rain_df$WindDir9am[rain_df$WindDir9am == "s"] <- "S"
rain_df$WindDir9am[rain_df$WindDir9am == "WSW"] <- "W"
rain_df$WindDir9am[rain_df$WindDir9am == "WNW"] <- "W"
rain_df$WindDir9am[rain_df$WindDir9am == "NW"] <- "W"
rain_df$WindDir9am[rain_df$WindDir9am == "W"] <- "W"
rain_df$WindDir3pm[rain_df$WindDir3pm == "NNW"] <- "N"
rain_df$WindDir3pm[rain_df$WindDir3pm == "NNE"] <- "N"
rain_df$WindDir3pm[rain_df$WindDir3pm == "NE"] <- "N"
rain_df$WindDir3pm[rain_df$WindDir3pm == "N"] <- "N"
rain_df$WindDir3pm[rain_df$WindDir3pm == "ENE"] <- "E"
rain_df$WindDir3pm[rain_df$WindDir3pm == "ESE"] <- "E"
rain_df$WindDir3pm[rain_df$WindDir3pm == "SE"] <- "E"
rain_df$WindDir3pm[rain_df$WindDir3pm == "E"] <- "E"
rain_df$WindDir3pm[rain_df$WindDir3pm == "SSE"] <- "S"
rain_df$WindDir3pm[rain_df$WindDir3pm == "SSW"] <- "S"
rain_df$WindDir3pm[rain_df$WindDir3pm == "SW"] <- "S"
rain_df$WindDir3pm[rain_df$WindDir3pm == "S"] <- "S"
rain_df$WindDir3pm[rain_df$WindDir3pm == "WSW"] <- "W"
rain_df$WindDir3pm[rain_df$WindDir3pm == "WNW"] <- "W"
rain_df$WindDir3pm[rain_df$WindDir3pm == "NW"] <- "W"
rain_df$WindDir3pm[rain_df$WindDir3pm == "W"] <- "W"
rain_df$WindGustDir[rain_df$WindGustDir == "NNW"] <- "N"
rain_df$WindGustDir[rain_df$WindGustDir == "NNE"] <- "N"
rain_df$WindGustDir[rain_df$WindGustDir == "NE"] <- "N"
rain_df$WindGustDir[rain_df$WindGustDir == "N"] <- "N"
rain_df$WindGustDir[rain_df$WindGustDir == "ENE"] <- "E"
rain_df$WindGustDir[rain_df$WindGustDir == "ESE"] <- "E"
rain_df$WindGustDir[rain_df$WindGustDir == "SE"] <- "E"
rain_df$WindGustDir[rain_df$WindGustDir == "E"] <- "E"
rain_df$WindGustDir[rain_df$WindGustDir == "SSE"] <- "S"
rain_df$WindGustDir[rain_df$WindGustDir == "SSW"] <- "S"
rain_df$WindGustDir[rain_df$WindGustDir == "SW"] <- "S"
rain_df$WindGustDir[rain_df$WindGustDir == "S"] <- "S"
rain_df$WindGustDir[rain_df$WindGustDir == "WSW"] <- "W"
rain_df$WindGustDir[rain_df$WindGustDir == "WNW"] <- "W"
rain_df$WindGustDir[rain_df$WindGustDir == "NW"] <- "W"
rain_df$WindGustDir[rain_df$WindGustDir == "W"] <- "W"
tail(rain_df)
#Filling NA with mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
rain_df$RainToday[is.na(rain_df$RainToday)] <- Mode(rain_df$RainToday)
rain_df$WindDir9am[is.na(rain_df$WindDir9am)] <- Mode(rain_df$WindDir9am)
rain_df$WindDir3pm[is.na(rain_df$WindDir3pm)] <- Mode(rain_df$WindDir3pm)
rain_df$WindGustDir[is.na(rain_df$WindGustDir)] <- Mode(rain_df$WindGustDir)
n_distinct(rain_df$Date)
# Change into datetime format in order to extarct month.
rain_df$Date <- as.POSIXct(rain_df$Date)
rain_df$Date <- month(rain_df$Date)
names(rain_df)[names(rain_df) == "Date"] <- "Month"
tail(rain_df)
# Creating delta varibles to check if changes in relation to data for example: change of wind speed from 9am to 3pm has impact on 'raintommorow' prediction
rain_df$DeltaWindSpeed <- rain_df$WindSpeed3pm - rain_df$WindSpeed9am
rain_df$DeltaHumidity <- rain_df$Humidity3pm - rain_df$Humidity9am
rain_df$DeltaPressure <- rain_df$Pressure3pm - rain_df$Pressure9am
rain_df$DeltaCloud <- rain_df$Cloud3pm - rain_df$Cloud9am
tail(rain_df)
#Looking for correlation with the 'RainTommorow' to pick the best attributes
Num_rain_df <- data.frame(rain_df$Month, rain_df$MinTemp, rain_df$MaxTemp, rain_df$Rainfall, rain_df$Evaporation, rain_df$Sunshine, rain_df$WindGustSpeed, rain_df$WindSpeed9am, rain_df$WindSpeed3pm, rain_df$Humidity9am, rain_df$Humidity3pm, rain_df$Pressure9am, rain_df$Pressure3pm, rain_df$Cloud9am, rain_df$Cloud3pm, rain_df$Temp9am, rain_df$Temp3pm, rain_df$RainTomorrow, rain_df$DeltaWindSpeed, rain_df$DeltaHumidity, rain_df$DeltaPressure, rain_df$DeltaCloud)
cor(Num_rain_df[, colnames(Num_rain_df) !="RainTomorrow"], Num_rain_df$rain_df.RainTomorrow)
# Like the previous case but with categorical data creating the variable to investigate relation of change in wind direction to the 'RainTommorow'
rain_df$WindChange <- cbind (rain_df$WindDir3pm, rain_df$WindDir9am)
# Replace objects Yes with 1 and No with 0
rain_df["RainToday"][rain_df["RainToday"] == "Yes"] <- 1
rain_df["RainToday"][rain_df["RainToday"] == "No"] <- 0
rain_df$RainToday <- as.numeric(rain_df$RainToday)
rain_df$RainToday[is.na(rain_df$RainToday)] <- Mode(rain_df$RainToday)
# Look for missing data
sum(is.na(rain_df$Date))
sum(is.na(rain_df$Location))
sum(is.na(rain_df$MinTemp))
sum(is.na(rain_df$MaxTemp))
sum(is.na(rain_df$Rainfall))
sum(is.na(rain_df$Evaporation))
sum(is.na(rain_df$Sunshine))
sum(is.na(rain_df$WindGustDir))
sum(is.na(rain_df$WindGustSpeed))
sum(is.na(rain_df$WindDir9am))
sum(is.na(rain_df$WindDir3pm))
sum(is.na(rain_df$WindSpeed9am))
sum(is.na(rain_df$WindSpeed3pm))
sum(is.na(rain_df$Humidity9am))
sum(is.na(rain_df$Humidity3pm))
sum(is.na(rain_df$Pressure9am))
sum(is.na(rain_df$Pressure3pm))
sum(is.na(rain_df$Cloud9am))
sum(is.na(rain_df$Cloud3pm))
sum(is.na(rain_df$Temp9am))
sum(is.na(rain_df$Temp3pm))
sum(is.na(rain_df$RainToday))
sum(is.na(rain_df$RainTomorrow))
#Change all variables into numerical to check correlation **added part**
rain_df$WindDir9am[rain_df$WindDir9am == "N"] <- 1
rain_df$WindDir9am[rain_df$WindDir9am == "E"] <- 10
rain_df$WindDir9am[rain_df$WindDir9am == "S"] <- 100
rain_df$WindDir9am[rain_df$WindDir9am == "W"] <- 1000
rain_df$WindDir9am[rain_df$WindDir9am == "N"] <- 1
rain_df$WindDir9am[rain_df$WindDir9am == "E"] <- 10
rain_df$WindDir9am[rain_df$WindDir9am == "S"] <- 100
rain_df$WindDir9am[rain_df$WindDir9am == "W"] <- 1000
rain_df$WindDir3pm[rain_df$WindDir3pm == "N"] <- 1
rain_df$WindDir3pm[rain_df$WindDir3pm == "E"] <- 10
rain_df$WindDir3pm[rain_df$WindDir3pm == "S"] <- 100
rain_df$WindDir3pm[rain_df$WindDir3pm == "W"] <- 1000
rain_df$WindGustDir[rain_df$WindGustDir == "N"] <- 1
rain_df$WindGustDir[rain_df$WindGustDir == "E"] <- 10
rain_df$WindGustDir[rain_df$WindGustDir == "S"] <- 100
rain_df$WindGustDir[rain_df$WindGustDir == "W"] <- 1000
rain_df$WindGustDir <- as.numeric(rain_df$WindGustDir)
rain_df$WindDir9am <- as.numeric(rain_df$WindDir9am)
rain_df$WindDir3pm <- as.numeric(rain_df$WindDir3pm)
rain_df$WindGustSpeed <- as.numeric(rain_df$WindGustSpeed)
rain_df$Humidity3pm <- as.numeric(rain_df$Humidity3pm)
rain_df$Humidity9am <- as.numeric(rain_df$Humidity9am)
rain_df$WindSpeed3pm <- as.numeric(rain_df$WindSpeed3pm)
rain_df$WindSpeed9am <- as.numeric(rain_df$WindSpeed9am)
rain_df$Cloud3pm <- as.numeric(rain_df$Cloud3pm)
rain_df$Cloud9am <- as.numeric(rain_df$Cloud9am)
#Select best features
rain_df_selected <- data.frame(rain_df$Month, rain_df$RainTomorrow, rain_df$Sunshine, rain_df$Pressure9am, rain_df$Pressure3pm, rain_df$Temp3pm, rain_df$MaxTemp, rain_df$WindGustSpeed, rain_df$Rainfall, rain_df$Cloud9am, rain_df$Humidity9am, rain_df$DeltaHumidity, rain_df$Cloud3pm, rain_df$Evaporation , rain_df$RainToday, rain_df$Humidity3pm, rain_df$WindGustDir, rain_df$DeltaPressure)
rain_df_selected$WindChange <- rain_df$WindDir3pm - rain_df$WindDir9am
#Look for correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Drop features with strong correlation
rain_df_selected <- rain_df_selected[-4]
rain_df_selected <- rain_df_selected[-5]
# Check selected data
tail(rain_df_selected)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Split features and label
y <- rain_df_selected$rain_df.RainTomorrow
x <- rain_df_selected[-2]
dim(x)
tail(x)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Variables, y=variables, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Variable, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
#Check again for strong correlation between features
cor_df <- round(cor(rain_df_selected), 2)
m_cor_df <- melt(cor_df)
ggplot(data = m_cor_df, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + geom_text(aes(label = value), size = 1) + scale_fill_gradient2(low = "darkred", high = "red",)
